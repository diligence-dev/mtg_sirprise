{"version":3,"sources":["webpack:///component---src-pages-index-js-ef59de24d84a40a71251.js","webpack:///./~/js-graph-algorithms/index.js","webpack:///./~/js-graph-algorithms/src/jsgraphs.js","webpack:///./~/object-assign/index.js","webpack:///./src/pages/index.js"],"names":["webpackJsonp","200","module","exports","__webpack_require__","201","jsgraphs","jss","less","a1","a2","compare","exchange","a","i","j","temp","StackNode","value","this","next","Stack","N","first","prototype","push","_push","x","oldX","pop","oldFirst","item","size","isEmpty","peep","toArray","result","QueueNode","Queue","last","enqueue","oldLast","dequeue","MinPQ","s","lengh","swim","k","parent","Math","floor","delMin","sink","child","QuickUnion","V","id","v","union","w","q","root","p","connected","IndexMinPQ","keys","pq","qp","insert","index","key","decreaseKey","minKey","min","containsIndex","Graph","adjList","nodeInfo","edges","addEdge","edge_id","Edge","adj","node","edge","DiGraph","reverse","g","adj_v","length","weight","either","other","from","to","WeightedGraph","e","WeightedDiGraph","call","Object","create","toDiGraph","FlowEdge","capacity","flow","residualCapacityTo","addResidualFlowTo","deltaFlow","FlowNetwork","DepthFirstSearch","G","marked","edgeTo","dfs","hasPathTo","pathTo","path","BreadthFirstSearch","queue","ConnectedComponents","count","componentId","componentCount","TopologicalSort","postOrder","order","StronglyConnectedComponents","KruskalMST","e1","e2","mst","uf","LazyPrimMST","visit","EagerPrimMST","Dijkstra","cost","cost1","cost2","Number","MAX_VALUE","relax","distanceTo","BellmanFord","TopologicalSortShortestPaths","FordFulkerson","t","bottle","hasAugmentedPath","minCut","cuts","65","toObject","val","undefined","TypeError","shouldUseNative","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","order2","map","n","join","test3","split","forEach","letter","err","getOwnPropertySymbols","hasOwnProperty","propIsEnumerable","propertyIsEnumerable","target","source","symbols","arguments","112","_interopRequireDefault","obj","__esModule","default","Home","_ref2","location","_useState2","_react","useState","search","replace","expansion","setExpansion","_useState3","openMana","setOpenMana","_useState4","allExpansion","setAllExpansions","useEffect","fetch","then","json","data","filter","parent_set_code","includes","set_type","foil_only","sort","released_at","_react2","createElement","onChange","callSetter","onBlur","code","toUpperCase","name","type","placeholder","QueryResult","_jsGraphAlgorithms","_jsGraphAlgorithms2","wubrg","setter","event","isCastable","manaCost","match","graph","openManaNode","W","U","B","R","C","manaCostNode","flowNeeded","toLowerCase","parseInt","maxFlow","_ref","_useState","cardImages","setCardImages","colorQuery","c","concat","endpoint","request","card","mana_cost","card_faces","image_uris","normal","style","maxWidth","imageUrl","width","src","alt"],"mappings":"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","file":"component---src-pages-index-js-ef59de24d84a40a71251.js","sourcesContent":["webpackJsonp([35783957827783],{\n\n/***/ 200:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(201);\n\n/***/ }),\n\n/***/ 201:\n/***/ (function(module, exports) {\n\n\tvar jsgraphs = jsgraphs || {};\r\n\t\r\n\t(function(jss){\r\n\t    \r\n\t    jss.less = function(a1, a2, compare) {\r\n\t        return compare(a1, a2) < 0;\r\n\t    };\r\n\t    \r\n\t    jss.exchange = function(a, i, j) {\r\n\t        var temp = a[i];\r\n\t        a[i] = a[j];\r\n\t        a[j] = temp;\r\n\t    };\r\n\t    \r\n\t    var StackNode = function (value) {\r\n\t        this.value = value;\r\n\t        this.next = null;\r\n\t    };\r\n\t    \r\n\t    jss.StackNode = StackNode;\r\n\t    \r\n\t    var Stack = function() {\r\n\t        this.N = 0;\r\n\t        this.first = null;\r\n\t    };\r\n\t    \r\n\t    Stack.prototype.push = function (a) {\r\n\t        this.first = this._push(this.first, a);  \r\n\t    };\r\n\t    \r\n\t    Stack.prototype._push = function(x, a) {\r\n\t        if(x == null) {\r\n\t            this.N++;\r\n\t            return new jss.StackNode(a);\r\n\t        }  \r\n\t        var oldX = x;\r\n\t        this.N++;\r\n\t        x = new jss.StackNode(a);\r\n\t        x.next = oldX;\r\n\t        return x;\r\n\t    };\r\n\t    \r\n\t    Stack.prototype.pop = function () {\r\n\t        if (this.first == null) {\r\n\t            return undefined;\r\n\t        }  \r\n\t        \r\n\t        var oldFirst = this.first;\r\n\t        var item = oldFirst.value;\r\n\t        this.first = oldFirst.next;\r\n\t        this.N--;\r\n\t        \r\n\t        return item;\r\n\t    };\r\n\t    \r\n\t    Stack.prototype.size = function() {\r\n\t        return this.N;  \r\n\t    };\r\n\t    \r\n\t    Stack.prototype.isEmpty = function() {\r\n\t        return this.N == 0;  \r\n\t    };\r\n\t    \r\n\t    Stack.prototype.peep = function() {\r\n\t        if (this.first == null) {\r\n\t            return undefined;\r\n\t        }  \r\n\t        \r\n\t        return this.first.value;\r\n\t    };\r\n\t    \r\n\t    Stack.prototype.toArray = function() {\r\n\t        var result = [];\r\n\t        x = this.first;\r\n\t        while (x != null) {\r\n\t            result.push(x.value);\r\n\t            x = x.next;\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    \r\n\t    jss.Stack = Stack;\r\n\t    \r\n\t    var QueueNode = function(a) {\r\n\t        this.value = a;  \r\n\t        this.next = null;\r\n\t    };\r\n\t    \r\n\t    jss.QueueNode = QueueNode;\r\n\t    \r\n\t    var Queue = function() {\r\n\t        this.first = null;\r\n\t        this.last = null;\r\n\t        this.N = 0;\r\n\t    };\r\n\t    \r\n\t    Queue.prototype.enqueue = function(item) {\r\n\t        var oldLast = this.last;\r\n\t        this.last = new jss.QueueNode(item);\r\n\t        if(oldLast != null){\r\n\t            oldLast.next = this.last;\r\n\t        }\r\n\t        if (this.first == null) {\r\n\t            this.first = this.last;\r\n\t        }\r\n\t        this.N++;\r\n\t    };\r\n\t    \r\n\t    Queue.prototype.dequeue = function() {\r\n\t        if(this.first == null) {\r\n\t            return undefined;\r\n\t        }  \r\n\t        \r\n\t        var oldFirst = this.first;\r\n\t        var item = oldFirst.value;\r\n\t        this.first = oldFirst.next;\r\n\t        \r\n\t        if(this.first == null) {\r\n\t            this.last = null;\r\n\t        }\r\n\t        \r\n\t        this.N--;\r\n\t        \r\n\t        return item;\r\n\t    };\r\n\t    \r\n\t    Queue.prototype.size = function() {\r\n\t        return this.N;  \r\n\t    };\r\n\t    \r\n\t    Queue.prototype.isEmpty = function() {\r\n\t        return this.N == 0;\r\n\t    };\r\n\t    \r\n\t    Queue.prototype.toArray = function() {\r\n\t        var result = [];\r\n\t        var x = this.first;\r\n\t        while (x != null) {\r\n\t            result.push(x.value);\r\n\t            x = x.next;\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    \r\n\t    jss.Queue = Queue;\r\n\t    \r\n\t    var MinPQ = function(compare) {\r\n\t        this.s = [];\r\n\t        this.N = 0;\r\n\t        if(!compare) {\r\n\t            compare = function(a1, a2) {\r\n\t                return a1 - a2;\r\n\t            };\r\n\t        }\r\n\t        this.compare = compare;\r\n\t    };\r\n\t    \r\n\t    MinPQ.prototype.enqueue = function(item) {\r\n\t        while(this.s.lengh <= this.N+1) {\r\n\t            this.s.push(0);\r\n\t        }   \r\n\t        this.s[++this.N] = item;\r\n\t        this.swim(this.N);\r\n\t    };\r\n\t    \r\n\t    MinPQ.prototype.swim = function(k) {\r\n\t        while (k > 1){\r\n\t            var parent = Math.floor(k / 2);\r\n\t            if(jss.less(this.s[k], this.s[parent], this.compare)){\r\n\t                jss.exchange(this.s, k, parent);\r\n\t                k = parent;\r\n\t            } else {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    MinPQ.prototype.delMin = function() {\r\n\t        if(this.N == 0) {\r\n\t            return undefined;\r\n\t        }  \r\n\t        \r\n\t        var item = this.s[1];\r\n\t        jss.exchange(this.s, 1, this.N--);\r\n\t        this.sink(1);\r\n\t        return item;\r\n\t    };\r\n\t    \r\n\t    MinPQ.prototype.sink = function(k) {\r\n\t        while(k * 2 <= this.N) {\r\n\t            var child = 2 * k;\r\n\t            if(child < this.N && jss.less(this.s[child+1], this.s[child], this.compare)){\r\n\t                child++;\r\n\t            }\r\n\t            if(jss.less(this.s[child], this.s[k], this.compare)){\r\n\t                jss.exchange(this.s, child, k);\r\n\t                k = child;\r\n\t            } else {\r\n\t                break;\r\n\t            }\r\n\t        }  \r\n\t    };\r\n\t    \r\n\t    MinPQ.prototype.size = function(){\r\n\t        return this.N;\r\n\t    };\r\n\t    \r\n\t    MinPQ.prototype.isEmpty = function() {\r\n\t        return this.N == 0;\r\n\t    };\r\n\t    \r\n\t    jss.MinPQ = MinPQ;\r\n\t    \r\n\t    var QuickUnion = function(V) {\r\n\t        this.id = [];\r\n\t        for (var v = 0; v < V; ++v) {\r\n\t            this.id.push(v);\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    QuickUnion.prototype.union = function(v, w) {\r\n\t        var q = this.root(v);\r\n\t        var p = this.root(w);\r\n\t        \r\n\t        if(p != q) {\r\n\t            this.id[p] = q;\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    QuickUnion.prototype.root = function(q) {\r\n\t        while(this.id[q] != q) {\r\n\t            q = this.id[q];\r\n\t        }  \r\n\t        return q;\r\n\t    };\r\n\t    \r\n\t    QuickUnion.prototype.connected = function(v, w) {\r\n\t        return this.root(v) == this.root(w);  \r\n\t    };\r\n\t    \r\n\t    jss.QuickUnion = QuickUnion;\r\n\t    \r\n\t    var IndexMinPQ = function(N, compare) {\r\n\t        this.keys = [];\r\n\t        this.pq = [];\r\n\t        this.qp = []; // positions of key in pq\r\n\t        for(var i = 0; i <= N; ++i) {\r\n\t            this.keys.push(null);\r\n\t            this.pq.push(0);\r\n\t            this.qp.push(-1);\r\n\t        }\r\n\t        this.N = 0;\r\n\t        \r\n\t        if(!compare) {\r\n\t            compare = function(a1, a2) {\r\n\t                return a1 - a2;  \r\n\t            };\r\n\t        } \r\n\t        this.compare = compare;\r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.insert = function (index, key) {\r\n\t        this.keys[index] = key;\r\n\t        \r\n\t        this.pq[++this.N] = index;\r\n\t        this.qp[index] = this.N;\r\n\t        this.swim(this.N);\r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.decreaseKey = function(index, key) {\r\n\t        if(jss.less(key, this.keys[index], this.compare)){\r\n\t            this.keys[index] = key;\r\n\t            this.swim(this.qp[index]);\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.minKey = function() {\r\n\t        return this.keys[this.pq[1]];  \r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.min = function() {\r\n\t        return this.pq[1];  \r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.delMin = function() {\r\n\t        var key = this.pq[1];\r\n\t        jss.exchange(this.pq, 1, this.N);\r\n\t        this.qp[this.pq[1]] = 1;\r\n\t        \r\n\t        this.qp[this.pq[this.N]] = -1;\r\n\t        this.keys[this.pq[this.N]] = null;\r\n\t    \r\n\t        this.N--;\r\n\t        \r\n\t        this.sink(1);\r\n\t        \r\n\t        return key;\r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.swim = function (k) {\r\n\t        while( k > 1) {\r\n\t            var parent = Math.floor(k / 2);\r\n\t            if(jss.less(this.keys[this.pq[k]], this.keys[this.pq[parent]], this.compare)){\r\n\t                jss.exchange(this.pq, k, parent);\r\n\t                this.qp[this.pq[k]] = k;\r\n\t                this.qp[this.pq[parent]] = parent;\r\n\t                k = parent;\r\n\t            } else {\r\n\t                break;\r\n\t            }\r\n\t        }  \r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.sink = function (k) {\r\n\t        while(2 * k <= this.N) {\r\n\t            var child = k * 2;\r\n\t            if(child < this.N && jss.less(this.keys[this.pq[child+1]], this.keys[this.pq[child]], this.compare)){\r\n\t                child++;\r\n\t            }\r\n\t            if(jss.less(this.keys[this.pq[child]], this.keys[this.pq[k]], this.compare)) {\r\n\t                jss.exchange(this.pq, k, child);\r\n\t                this.qp[this.pq[k]] = k;\r\n\t                this.qp[this.pq[child]] = child;\r\n\t                k = child;\r\n\t            } else {\r\n\t                break;\r\n\t            }\r\n\t        }  \r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.containsIndex = function (index) {\r\n\t        return this.qp[index] != -1;  \r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.isEmpty = function() {\r\n\t        return this.N == 0;  \r\n\t    };\r\n\t    \r\n\t    IndexMinPQ.prototype.size = function() {\r\n\t        return this.N;\r\n\t    }\r\n\t    \r\n\t    jss.IndexMinPQ = IndexMinPQ;\r\n\t    \r\n\t\tvar Graph = function (V) {\r\n\t        this.V = V;\r\n\t        this.adjList = [];\r\n\t        this.nodeInfo = [];\r\n\t        this.edges = {};\r\n\t        for (var i = 0; i < V; ++i) {\r\n\t            this.adjList.push([]);\r\n\t            this.nodeInfo.push({});\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    Graph.prototype.addEdge = function(v, w){\r\n\t        this.adjList[v].push(w);\r\n\t        this.adjList[w].push(v);\r\n\t        var edge_id = v + '_' + w;\r\n\t        if(v > w) {\r\n\t            edge_id = w + '_' + v;\r\n\t        }\r\n\t        this.edges[edge_id] = new jss.Edge(v, w, 0);\r\n\t    };\r\n\t    \r\n\t    Graph.prototype.adj = function(v) {\r\n\t        return this.adjList[v];  \r\n\t    };\r\n\t    \r\n\t    Graph.prototype.node = function(v) {\r\n\t        return this.nodeInfo[v];  \r\n\t    };\r\n\t    \r\n\t    Graph.prototype.edge = function(v, w) {\r\n\t        var edge_id = v + '_' + w;\r\n\t        if(v > w) {\r\n\t            edge_id = w + '_' + v;\r\n\t        }\r\n\t        if (edge_id in this.edges) {\r\n\t            return this.edges[edge_id];\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    \r\n\t    jss.Graph = Graph;\r\n\t    \r\n\t    var DiGraph = function(V) {\r\n\t        this.V = V;\r\n\t        this.adjList = [];\r\n\t        this.nodeInfo = [];\r\n\t        this.edges = {};\r\n\t        for (var v = 0; v < V; ++v){\r\n\t            this.adjList.push([]);\r\n\t            this.nodeInfo.push({});\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    DiGraph.prototype.addEdge = function(v, w){\r\n\t        this.adjList[v].push(w);\r\n\t        var edge_id = v + '_' + w;\r\n\t        this.edges[edge_id] = new jss.Edge(v, w, 0);\r\n\t    };\r\n\t    \r\n\t    DiGraph.prototype.edge = function(v, w) {\r\n\t        var edge_id = v + '_' + w;\r\n\t        if(edge_id in this.edges) {\r\n\t            return this.edges[edge_id];\r\n\t        } else {\r\n\t            return null;\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    DiGraph.prototype.adj = function(v) {\r\n\t        return this.adjList[v];  \r\n\t    };\r\n\t    \r\n\t    DiGraph.prototype.node = function(v) {\r\n\t        return this.nodeInfo[v];  \r\n\t    };\r\n\t    \r\n\t    DiGraph.prototype.reverse = function(){\r\n\t        var g = new DiGraph(this.V);\r\n\t        for (var v = 0; v < this.V; ++v) {\r\n\t            var adj_v = this.adjList[v];\r\n\t            for (var i = 0; i < adj_v.length; ++i){\r\n\t                var w = adj_v[i];\r\n\t                g.addEdge(w, v);\r\n\t            }\r\n\t        }\r\n\t        return g;\r\n\t    };\r\n\t    \r\n\t    jss.DiGraph = DiGraph;\r\n\t    \r\n\t    var Edge = function(v, w, weight) {\r\n\t        this.v = v;\r\n\t        this.w = w;\r\n\t        this.weight = weight;\r\n\t    };\r\n\t    \r\n\t    Edge.prototype.either = function() {\r\n\t        return this.v;\r\n\t    };\r\n\t    \r\n\t    Edge.prototype.other = function(x) {\r\n\t        return x == this.v ? this.w : this.v;\r\n\t    };\r\n\t    \r\n\t    Edge.prototype.from = function() {\r\n\t        return this.v;\r\n\t    };\r\n\t    \r\n\t    Edge.prototype.to = function() {\r\n\t        return this.w;\r\n\t    };\r\n\t    \r\n\t    jss.Edge = Edge;\r\n\t    \r\n\t    var WeightedGraph = function(V) {\r\n\t        this.V = V;\r\n\t        this.adjList = [];\r\n\t        this.nodeInfo = [];\r\n\t        \r\n\t        for ( var v = 0; v < V; ++v) {\r\n\t            this.adjList.push([]);\r\n\t            this.nodeInfo.push({});\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    WeightedGraph.prototype.adj = function(v) {\r\n\t        return this.adjList[v];  \r\n\t    };\r\n\t    \r\n\t    WeightedGraph.prototype.edge = function(v, w) {\r\n\t        var adj_v = this.adjList[v];\r\n\t        for(var i=0; i < adj_v.length; ++i) {\r\n\t            var x = adj_v[i].other(v);\r\n\t            if(x == w) {\r\n\t                return adj_v[i];\r\n\t            }\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    \r\n\t    WeightedGraph.prototype.node = function(v) {\r\n\t        return this.nodeInfo[v];  \r\n\t    };\r\n\t    \r\n\t    WeightedGraph.prototype.addEdge = function(e) {\r\n\t        var v = e.either();\r\n\t        var w = e.other(v);\r\n\t        this.adjList[v].push(e);\r\n\t        this.adjList[w].push(e);\r\n\t    };\r\n\t    \r\n\t    jss.WeightedGraph = WeightedGraph;\r\n\t    \r\n\t    var WeightedDiGraph = function(V) {\r\n\t        WeightedGraph.call(this, V);\r\n\t    };\r\n\t    \r\n\t    WeightedDiGraph.prototype = Object.create(jss.WeightedGraph.prototype);\r\n\t    \r\n\t    WeightedDiGraph.prototype.addEdge = function(e) {\r\n\t        var v = e.from();\r\n\t        this.adjList[v].push(e);\r\n\t    };\r\n\t    \r\n\t    WeightedDiGraph.prototype.edge = function(v, w) {\r\n\t        var adj_v = this.adjList[v];\r\n\t        for(var i=0; i < adj_v.length; ++i) {\r\n\t            var x = adj_v[i].other(v);\r\n\t            if(x == w) {\r\n\t                return adj_v[i];\r\n\t            }\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    \r\n\t    WeightedDiGraph.prototype.toDiGraph = function() {\r\n\t        var g = new jss.DiGraph(this.V);\r\n\t        for(var v = 0; v < this.V; ++v) {\r\n\t            var adj_v = this.adjList[v];\r\n\t            for (var i =0; i < adj_v.length; ++i) {\r\n\t                var e = adj_v[i];\r\n\t                var w = e.other(v);\r\n\t                g.addEdge(v, w);\r\n\t            }\r\n\t        }\r\n\t        return g;\r\n\t    };\r\n\t    \r\n\t    jss.WeightedDiGraph = WeightedDiGraph;\r\n\t    \r\n\t    var FlowEdge = function(v, w, capacity) {\r\n\t        this.v = v;\r\n\t        this.w = w;\r\n\t        this.capacity = capacity;\r\n\t        this.flow = 0;\r\n\t    };\r\n\t    \r\n\t    FlowEdge.prototype.residualCapacityTo = function (x) {\r\n\t        if(x == this.v) {\r\n\t            return this.flow;\r\n\t        } else {\r\n\t            return this.capacity - this.flow;\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    FlowEdge.prototype.addResidualFlowTo = function (x, deltaFlow) {\r\n\t        if(x == this.v) {\r\n\t            this.flow -= deltaFlow;\r\n\t        } else if(x == this.w) {\r\n\t            this.flow += deltaFlow;\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    FlowEdge.prototype.from = function() {\r\n\t        return this.v;\r\n\t    };\r\n\t    \r\n\t    FlowEdge.prototype.to = function() {\r\n\t        return this.w;\r\n\t    };\r\n\t    \r\n\t    FlowEdge.prototype.other = function(x) {\r\n\t        return x == this.v ? this.w : this.v;\r\n\t    }\r\n\t    \r\n\t    \r\n\t    jss.FlowEdge = FlowEdge;\r\n\t    \r\n\t    var FlowNetwork = function(V) {\r\n\t        this.V = V;\r\n\t        this.adjList = [];\r\n\t        this.nodeInfo = [];\r\n\t        for(var v = 0; v < V; ++v) {\r\n\t            this.adjList.push([]);\r\n\t            this.nodeInfo.push({});\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    FlowNetwork.prototype.node = function(v) {\r\n\t        return this.nodeInfo[v];\r\n\t    };\r\n\t    \r\n\t    FlowNetwork.prototype.edge = function(v, w) {\r\n\t        var adj_v = this.adjList[v];\r\n\t        for(var i=0; i < adj_v.length; ++i) {\r\n\t            var x = adj_v[i].other(v);\r\n\t            if(x == w) {\r\n\t                return adj_v[i];\r\n\t            }\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    \r\n\t    FlowNetwork.prototype.addEdge = function(e) {\r\n\t        var v = e.from();\r\n\t        this.adjList[v].push(e);\r\n\t        var w = e.other(v);\r\n\t        this.adjList[w].push(e);\r\n\t    };\r\n\t    \r\n\t    FlowNetwork.prototype.adj = function(v) {\r\n\t        return this.adjList[v];  \r\n\t    };\r\n\t    \r\n\t    jss.FlowNetwork = FlowNetwork;\r\n\t    \r\n\t    var DepthFirstSearch = function(G, s) {\r\n\t        this.s = s;\r\n\t        var V = G.V;\r\n\t        this.marked = [];\r\n\t        this.edgeTo = [];\r\n\t        for (var v = 0; v < V; ++v) {\r\n\t            this.marked.push(false);\r\n\t            this.edgeTo.push(-1);\r\n\t        }\r\n\t        \r\n\t        this.dfs(G, s);\r\n\t    };\r\n\t    \r\n\t    DepthFirstSearch.prototype.dfs = function (G, v) {\r\n\t        this.marked[v] = true;\r\n\t        var adj_v = G.adj(v);\r\n\t        for (var i = 0; i < adj_v.length; ++i){\r\n\t            var w = adj_v[i];\r\n\t            if (!this.marked[w]){\r\n\t                this.edgeTo[w] = v;\r\n\t                this.dfs(G, w);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    DepthFirstSearch.prototype.hasPathTo = function(v) {\r\n\t        return this.marked[v];\r\n\t    };\r\n\t    \r\n\t    DepthFirstSearch.prototype.pathTo = function(v) {\r\n\t        var path = new jss.Stack();\r\n\t        if(v == this.s) return [v];\r\n\t        \r\n\t        for(var x = v; x != this.s; x = this.edgeTo[x]) {\r\n\t            path.push(x);\r\n\t        }\r\n\t        path.push(this.s);\r\n\t        return path.toArray();\r\n\t    };\r\n\t    \r\n\t    jss.DepthFirstSearch = DepthFirstSearch;\r\n\t    \r\n\t    var BreadthFirstSearch = function(G, s) {\r\n\t        var V = G.V;\r\n\t        this.s = s;\r\n\t        \r\n\t        var queue = new jss.Queue();\r\n\t        queue.enqueue(s);\r\n\t        this.marked = [];\r\n\t        this.edgeTo = [];\r\n\t        \r\n\t        for(var v = 0; v < V; ++v) {\r\n\t            this.marked.push(false);\r\n\t            this.edgeTo.push(-1);\r\n\t        }\r\n\t        \r\n\t        while (!queue.isEmpty()) {\r\n\t            var v = queue.dequeue();\r\n\t            this.marked[v] = true;\r\n\t            var adj_v = G.adj(v);\r\n\t            for (var i = 0; i < adj_v.length; ++i) {\r\n\t                var w = adj_v[i];\r\n\t                if(!this.marked[w]){\r\n\t                    this.edgeTo[w] = v;\r\n\t                    queue.enqueue(w);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    BreadthFirstSearch.prototype.hasPathTo = function(v) {\r\n\t        return this.marked[v];\r\n\t    };\r\n\t    \r\n\t    BreadthFirstSearch.prototype.pathTo = function(v) {\r\n\t        var path = new jss.Stack();\r\n\t        if(v == this.s) return [v];\r\n\t        \r\n\t        for(var x = v; x != this.s; x = this.edgeTo[x]) {\r\n\t            path.push(x);\r\n\t        }\r\n\t        path.push(this.s);\r\n\t        return path.toArray();\r\n\t    };\r\n\t    \r\n\t    jss.BreadthFirstSearch = BreadthFirstSearch;\r\n\t    \r\n\t    var ConnectedComponents = function(G) {\r\n\t        this.count = 0;\r\n\t        var V = G.V;\r\n\t        this.marked = [];\r\n\t        this.id = [];\r\n\t        for (var v = 0; v < V; ++v) {\r\n\t            this.marked.push(false);\r\n\t            this.id.push(-1);\r\n\t        }\r\n\t        \r\n\t        for (var v = 0; v < V; ++v) {\r\n\t            if(!this.marked[v]){\r\n\t                this.dfs(G, v);\r\n\t                this.count++;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    ConnectedComponents.prototype.dfs = function(G, v) {\r\n\t        this.marked[v] = true;\r\n\t        this.id[v] = this.count;\r\n\t        var adj_v = G.adj(v);\r\n\t        \r\n\t        for(var i = 0; i < adj_v.length; ++i){\r\n\t            var w = adj_v[i];\r\n\t            if(!this.marked[w]){\r\n\t                this.dfs(G, w);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    ConnectedComponents.prototype.componentId = function(v) {\r\n\t        return this.id[v];\r\n\t    };\r\n\t    \r\n\t    ConnectedComponents.prototype.componentCount = function(){\r\n\t        return this.count;\r\n\t    };\r\n\t    \r\n\t    \r\n\t    jss.ConnectedComponents = ConnectedComponents;\r\n\t    \r\n\t    var TopologicalSort = function(G) {\r\n\t        this.postOrder = new jss.Stack();\r\n\t        this.marked = [];\r\n\t        var V = G.V;\r\n\t        for (var v = 0; v < V; ++v) {\r\n\t            this.marked.push(false);\r\n\t        }\r\n\t        \r\n\t        for (var v = 0; v < V; ++v) {\r\n\t            if(!this.marked[v]) {\r\n\t                this.dfs(G, v);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    TopologicalSort.prototype.dfs = function(G, v) {\r\n\t        this.marked[v] = true;\r\n\t        var adj_v = G.adj(v);\r\n\t        for (var i = 0; i < adj_v.length; ++i) {\r\n\t            var w = adj_v[i];\r\n\t            if(!this.marked[w]){\r\n\t                this.dfs(G, w);\r\n\t            }\r\n\t        }\r\n\t        this.postOrder.push(v);\r\n\t    };\r\n\t    \r\n\t    TopologicalSort.prototype.order = function() {\r\n\t        return this.postOrder.toArray();  \r\n\t    };\r\n\t    \r\n\t    jss.TopologicalSort = TopologicalSort;\r\n\t    \r\n\t    var StronglyConnectedComponents = function(G) {\r\n\t        var V = G.V;\r\n\t        this.count = 0;\r\n\t        this.marked = [];\r\n\t        this.id = [];\r\n\t        \r\n\t        for(var v = 0; v < V; ++v) {\r\n\t            this.marked.push(false);\r\n\t            this.id.push(-1);\r\n\t        }\r\n\t        \r\n\t        var order = new jss.TopologicalSort(G.reverse()).order();\r\n\t        for( var i = 0; i < order.length; ++i) {\r\n\t            var v = order[i];\r\n\t            if(!this.marked[v]){\r\n\t                this.dfs(G, v);\r\n\t                this.count++;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    StronglyConnectedComponents.prototype.dfs = function (G, v) {\r\n\t        this.marked[v] = true;\r\n\t        this.id[v] = this.count;\r\n\t        var adj_v = G.adj(v);\r\n\t        for (var i = 0; i < adj_v.length; ++i){\r\n\t            var w = adj_v[i];\r\n\t            if(!this.marked[w]){\r\n\t                this.dfs(G, w);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    \r\n\t    StronglyConnectedComponents.prototype.componentId = function(v) {\r\n\t        return this.id[v];\r\n\t    };\r\n\t    \r\n\t    StronglyConnectedComponents.prototype.componentCount = function(){\r\n\t        return this.count;\r\n\t    };\r\n\t    \r\n\t    jss.StronglyConnectedComponents = StronglyConnectedComponents;\r\n\t    \r\n\t    var KruskalMST = function(G) {\r\n\t        var V = G.V;\r\n\t        var pq = new jss.MinPQ(function(e1, e2){\r\n\t            return e1.weight - e2.weight;\r\n\t        });\r\n\t        for(var v = 0; v < G.V; ++v){\r\n\t            var adj_v = G.adj(v);\r\n\t            for (var i = 0; i < adj_v.length; ++i) {\r\n\t                var e = adj_v[i];\r\n\t                if(e.either() != v) {\r\n\t                    continue;\r\n\t                }\r\n\t                pq.enqueue(e);\r\n\t            }\r\n\t        }\r\n\t        \r\n\t        this.mst = [];\r\n\t        \r\n\t        var uf = new jss.QuickUnion(V);\r\n\t        while (!pq.isEmpty() && this.mst.length < V-1) {\r\n\t            var e = pq.delMin();\r\n\t            var v = e.either();\r\n\t            var w = e.other(v);\r\n\t            \r\n\t            if(!uf.connected(v, w)){\r\n\t                uf.union(v, w);\r\n\t                this.mst.push(e);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    \r\n\t    \r\n\t    jss.KruskalMST = KruskalMST;\r\n\t    \r\n\t    var LazyPrimMST = function(G) {\r\n\t        var V = G.V;\r\n\t        this.marked = [];\r\n\t        for( var v = 0; v < V; ++v) {\r\n\t            this.marked.push(false);\r\n\t        }\r\n\t        \r\n\t        this.pq = new jss.MinPQ(function(e1, e2){\r\n\t            return e1.weight - e2.weight;\r\n\t        });\r\n\t        \r\n\t        this.mst = [];\r\n\t        \r\n\t        this.visit(G, 0);\r\n\t        \r\n\t        while(!this.pq.isEmpty() && this.mst.length < V-1) {\r\n\t            var e = this.pq.delMin();\r\n\t            var v = e.either();\r\n\t            var w = e.other(v);\r\n\t            if(this.marked[v] && this.marked[w]) continue;\r\n\t            this.mst.push(e);\r\n\t            if(!this.marked[v]) this.visit(G, v);\r\n\t            if(!this.marked[w]) this.visit(G, w);\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    LazyPrimMST.prototype.visit = function(G, v) {\r\n\t        this.marked[v]  = true;\r\n\t        var adj_v = G.adj(v);\r\n\t        for (var i = 0; i < adj_v.length; ++i) {\r\n\t            var e = adj_v[i];\r\n\t            if(!this.marked[e.other(v)]){\r\n\t                this.pq.enqueue(e);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    jss.LazyPrimMST = LazyPrimMST;\r\n\t    \r\n\t    var EagerPrimMST = function(G) {\r\n\t        var V = G.V;\r\n\t        this.pq = new jss.IndexMinPQ(V, function(e1, e2) {\r\n\t            return e1.weight - e2.weight;\r\n\t        });\r\n\t        this.marked = [];\r\n\t        for(var v = 0; v < V; ++v) {\r\n\t            this.marked.push(false);\r\n\t        }\r\n\t        this.mst = [];\r\n\t        this.visit(G, 0);\r\n\t        while(!this.pq.isEmpty()) {\r\n\t            var e = this.pq.minKey();\r\n\t            var w = this.pq.delMin();\r\n\t            \r\n\t            this.mst.push(e);\r\n\t            \r\n\t            if(!this.marked[w]){\r\n\t                this.visit(G, w);\r\n\t            }\r\n\t            \r\n\t        }\r\n\t    };\r\n\t    \r\n\t    EagerPrimMST.prototype.visit = function(G, v) {\r\n\t        this.marked[v]  = true;\r\n\t        var adj_v = G.adj(v);\r\n\t        for(var i = 0; i < adj_v.length; ++i) {\r\n\t            var e = adj_v[i];\r\n\t            var w = e.other(v);\r\n\t            if(this.marked[w]) continue;\r\n\t            if(this.pq.containsIndex(w)){\r\n\t                this.pq.decreaseKey(w, e);\r\n\t            } else {\r\n\t                this.pq.insert(w, e);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    jss.EagerPrimMST = EagerPrimMST;\r\n\t    \r\n\t    var Dijkstra = function(G, s) {\r\n\t        var V = G.V;\r\n\t        this.s = s;\r\n\t        this.marked = [];\r\n\t        this.edgeTo = [];\r\n\t        this.cost = [];\r\n\t        this.pq = new jss.IndexMinPQ(V, function(cost1, cost2){\r\n\t            return cost1, cost2;\r\n\t        });\r\n\t        \r\n\t        for(var v =0; v < V; ++v){\r\n\t            this.marked.push(false);\r\n\t            this.edgeTo.push(null);\r\n\t            this.cost.push(Number.MAX_VALUE);\r\n\t        }\r\n\t        \r\n\t        this.cost[s] = 0;\r\n\t        \r\n\t        this.pq.insert(s, this.cost[s]);\r\n\t        \r\n\t        while(!this.pq.isEmpty()) {\r\n\t            var v = this.pq.delMin();\r\n\t            this.marked[v] = true;\r\n\t            var adj_v = G.adj(v);\r\n\t            for(var i = 0; i < adj_v.length; ++i) {\r\n\t                var e = adj_v[i];\r\n\t                this.relax(e);\r\n\t            }\r\n\t        }\r\n\t        \r\n\t    };\r\n\t    \r\n\t        \r\n\t    \r\n\t    \r\n\t    Dijkstra.prototype.relax = function(e) {\r\n\t        \r\n\t        var v = e.from();\r\n\t        var w = e.to();\r\n\t        \r\n\t        if(this.cost[w] > this.cost[v] + e.weight) {\r\n\t            this.cost[w] = this.cost[v] + e.weight;\r\n\t            this.edgeTo[w] = e;\r\n\t            if(this.pq.containsIndex(w)){\r\n\t                this.pq.decreaseKey(w, this.cost[w]);\r\n\t            } else {\r\n\t                this.pq.insert(w, this.cost[w]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    \r\n\t\r\n\t    \r\n\t    Dijkstra.prototype.hasPathTo = function(v) {\r\n\t        return this.marked[v];  \r\n\t    };\r\n\t\r\n\t    \r\n\t    Dijkstra.prototype.pathTo = function(v) {\r\n\t        var path = new jss.Stack();\r\n\t        for(var x = v; x != this.s; x = this.edgeTo[x].other(x)) {\r\n\t            path.push(this.edgeTo[x]);\r\n\t        }  \r\n\t        return path.toArray();\r\n\t    };\r\n\t    \r\n\t    Dijkstra.prototype.distanceTo = function(v) {\r\n\t        return this.cost[v];  \r\n\t    };\r\n\t    \r\n\t    \r\n\t    jss.Dijkstra = Dijkstra;\r\n\t    \r\n\t    var BellmanFord = function(G, s) {\r\n\t        var V = G.V;\r\n\t        this.s = s;\r\n\t        this.marked = [];\r\n\t        this.edgeTo = [];\r\n\t        this.cost = [];\r\n\t        \r\n\t        \r\n\t        for(var v =0; v < V; ++v){\r\n\t            this.marked.push(false);\r\n\t            this.edgeTo.push(null);\r\n\t            this.cost.push(Number.MAX_VALUE);\r\n\t        }\r\n\t        \r\n\t        this.cost[s] = 0;\r\n\t        this.marked[s] = true;\r\n\t        \r\n\t        for(var j = 0; j < V; ++j) {\r\n\t            for(var v = 0; v < V; ++v){\r\n\t                var adj_v = G.adj(v);\r\n\t                for(var i = 0; i < adj_v.length; ++i) {\r\n\t                    var e = adj_v[i];\r\n\t                    this.relax(e);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        \r\n\t    };\r\n\t    \r\n\t    BellmanFord.prototype.relax = function(e) {\r\n\t        \r\n\t        var v = e.from();\r\n\t        var w = e.to();\r\n\t        \r\n\t        if(this.cost[w] > this.cost[v] + e.weight) {\r\n\t            this.cost[w] = this.cost[v] + e.weight;\r\n\t            this.marked[w] = true;\r\n\t            this.edgeTo[w] = e;\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    BellmanFord.prototype.hasPathTo = function(v) {\r\n\t        return this.marked[v];  \r\n\t    };\r\n\t\r\n\t    \r\n\t    BellmanFord.prototype.pathTo = function(v) {\r\n\t        var path = new jss.Stack();\r\n\t        for(var x = v; x != this.s; x = this.edgeTo[x].other(x)) {\r\n\t            path.push(this.edgeTo[x]);\r\n\t        }  \r\n\t        return path.toArray();\r\n\t    };\r\n\t    \r\n\t    BellmanFord.prototype.distanceTo = function(v) {\r\n\t        return this.cost[v];  \r\n\t    };\r\n\t    \r\n\t    jss.BellmanFord = BellmanFord;\r\n\t    \r\n\t    var TopologicalSortShortestPaths = function(G, s) {\r\n\t        var V = G.V;\r\n\t        this.s = s;\r\n\t        this.marked = [];\r\n\t        this.edgeTo = [];\r\n\t        this.cost = [];\r\n\t        \r\n\t        \r\n\t        for(var v =0; v < V; ++v){\r\n\t            this.marked.push(false);\r\n\t            this.edgeTo.push(null);\r\n\t            this.cost.push(Number.MAX_VALUE);\r\n\t        }\r\n\t        \r\n\t        this.cost[s] = 0;\r\n\t        this.marked[s] = true;\r\n\t        \r\n\t        var order = new jss.TopologicalSort(G.toDiGraph()).order();\r\n\t        \r\n\t        \r\n\t        for(var j = 0; j < order.length; ++j){\r\n\t            var v = order[j];\r\n\t            var adj_v = G.adj(v);\r\n\t            for(var i = 0; i < adj_v.length; ++i) {\r\n\t                var e = adj_v[i];\r\n\t                this.relax(e);\r\n\t            }\r\n\t        }\r\n\t        \r\n\t        \r\n\t    };\r\n\t    \r\n\t    TopologicalSortShortestPaths.prototype.relax = function(e) {\r\n\t        \r\n\t        var v = e.from();\r\n\t        var w = e.to();\r\n\t        \r\n\t        if(this.cost[w] > this.cost[v] + e.weight) {\r\n\t            this.cost[w] = this.cost[v] + e.weight;\r\n\t            this.marked[w] = true;\r\n\t            this.edgeTo[w] = e;\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    TopologicalSortShortestPaths.prototype.hasPathTo = function(v) {\r\n\t        return this.marked[v];  \r\n\t    };\r\n\t\r\n\t    \r\n\t    TopologicalSortShortestPaths.prototype.pathTo = function(v) {\r\n\t        var path = new jss.Stack();\r\n\t        for(var x = v; x != this.s; x = this.edgeTo[x].other(x)) {\r\n\t            path.push(this.edgeTo[x]);\r\n\t        }  \r\n\t        return path.toArray();\r\n\t    };\r\n\t    \r\n\t    TopologicalSortShortestPaths.prototype.distanceTo = function(v) {\r\n\t        return this.cost[v];  \r\n\t    };\r\n\t    \r\n\t    jss.TopologicalSortShortestPaths = TopologicalSortShortestPaths;\r\n\t    \r\n\t    var FordFulkerson = function(G, s, t) {\r\n\t        this.value = 0;\r\n\t        var V = G.V;\r\n\t        var bottle = Number.MAX_VALUE;\r\n\t        this.marked = null;\r\n\t        this.edgeTo = null;\r\n\t        this.s = s;\r\n\t        this.t = t;\r\n\t        while(this.hasAugmentedPath(G)){\r\n\t            \r\n\t            for(var x = this.t; x != this.s; x = this.edgeTo[x].other(x)) {\r\n\t                bottle = Math.min(bottle, this.edgeTo[x].residualCapacityTo(x));\r\n\t            }\r\n\t            \r\n\t            for(var x = this.t; x != this.s; x = this.edgeTo[x].other(x)) {\r\n\t                this.edgeTo[x].addResidualFlowTo(x, bottle);\r\n\t            }\r\n\t            \r\n\t            \r\n\t            this.value += bottle;\r\n\t        }\r\n\t    };\r\n\t    \r\n\t    FordFulkerson.prototype.hasAugmentedPath = function(G) {\r\n\t        var V = G.V;\r\n\t        this.marked = [];\r\n\t        this.edgeTo = [];\r\n\t        for(var v = 0; v < V; ++v) {\r\n\t            this.marked.push(false);\r\n\t            this.edgeTo.push(null);\r\n\t        }\r\n\t        \r\n\t        var queue = new jss.Queue();\r\n\t        queue.enqueue(this.s);\r\n\t        \r\n\t        this.marked[this.s] = true;\r\n\t        while(!queue.isEmpty()){\r\n\t            var v = queue.dequeue();\r\n\t            var adj_v = G.adj(v);\r\n\t            \r\n\t            for (var i = 0; i < adj_v.length; ++i) {\r\n\t                var e = adj_v[i];\r\n\t                var w = e.other(v);\r\n\t                if(!this.marked[w] && e.residualCapacityTo(w) > 0){\r\n\t                    this.edgeTo[w] = e;\r\n\t                    this.marked[w] = true;\r\n\t                    if(w == this.t){\r\n\t                        return true;\r\n\t                    }\r\n\t                    \r\n\t                    queue.enqueue(w);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        \r\n\t        return false;\r\n\t    };\r\n\t    \r\n\t    FordFulkerson.prototype.minCut = function(G) {\r\n\t        var cuts = [];\r\n\t        var V = G.V;\r\n\t        for(var v = 0; v < V; ++v){\r\n\t            var adj_v = G.adj(v);\r\n\t            for(var i = 0; i < adj_v.length; ++i) {\r\n\t                var e = adj_v[i];\r\n\t                if(e.from() == v && e.residualCapacityTo(e.other(v)) == 0) {\r\n\t                    cuts.push(e);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        \r\n\t        return cuts;\r\n\t    };\r\n\t\r\n\t    jss.FordFulkerson = FordFulkerson;\r\n\t})(jsgraphs);\r\n\t\r\n\tvar module = module || {};\r\n\tif(module) {\r\n\t\tmodule.exports = jsgraphs;\r\n\t}\n\n/***/ }),\n\n/***/ 65:\n/***/ (function(module, exports) {\n\n\t/*\n\tobject-assign\n\t(c) Sindre Sorhus\n\t@license MIT\n\t*/\n\t\n\t'use strict';\n\t/* eslint-disable no-unused-vars */\n\tvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\tvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\t\n\tfunction toObject(val) {\n\t\tif (val === null || val === undefined) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\t\n\t\treturn Object(val);\n\t}\n\t\n\tfunction shouldUseNative() {\n\t\ttry {\n\t\t\tif (!Object.assign) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// Detect buggy property enumeration order in older V8 versions.\n\t\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\t\ttest1[5] = 'de';\n\t\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\t\tvar test2 = {};\n\t\t\tfor (var i = 0; i < 10; i++) {\n\t\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t\t}\n\t\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\t\treturn test2[n];\n\t\t\t});\n\t\t\tif (order2.join('') !== '0123456789') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\t\tvar test3 = {};\n\t\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\t\ttest3[letter] = letter;\n\t\t\t});\n\t\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\t\tvar from;\n\t\tvar to = toObject(target);\n\t\tvar symbols;\n\t\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = Object(arguments[s]);\n\t\n\t\t\tfor (var key in from) {\n\t\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\t\tto[key] = from[key];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (getOwnPropertySymbols) {\n\t\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn to;\n\t};\n\n\n/***/ }),\n\n/***/ 112:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.default = Home;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _jsGraphAlgorithms = __webpack_require__(200);\n\t\n\tvar _jsGraphAlgorithms2 = _interopRequireDefault(_jsGraphAlgorithms);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar wubrg = 'wubrg'.split('');\n\tvar callSetter = function callSetter(setter) {\n\t  return function (event) {\n\t    return setter(event.target.value);\n\t  };\n\t};\n\t\n\tvar isCastable = function isCastable(openMana, manaCost) {\n\t  openMana = openMana.toUpperCase().match(/[WUBRGC]/g);\n\t\n\t  var graph = new _jsGraphAlgorithms2.default.FlowNetwork(14);\n\t  var source = 0;\n\t  var sink = 13;\n\t  var openManaNode = {\n\t    W: 1,\n\t    U: 2,\n\t    B: 3,\n\t    R: 4,\n\t    G: 5,\n\t    C: 6\n\t  };\n\t  var manaCostNode = {\n\t    W: 7,\n\t    U: 8,\n\t    B: 9,\n\t    R: 10,\n\t    G: 11,\n\t    C: 12\n\t  };\n\t\n\t  openMana.forEach(function (x) {\n\t    return graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(source, openManaNode[x], 1));\n\t  });\n\t\n\t  var flowNeeded = 0;\n\t  manaCost.toUpperCase().replace('{X}', '').match(/\\{([0-9]+|[WUBRG])\\}/g).map(function (x) {\n\t    return x.replace('{', '').replace('}', '');\n\t  }).forEach(function (x) {\n\t    if (wubrg.includes(x.toLowerCase())) {\n\t      graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(manaCostNode[x], sink, 1));\n\t      flowNeeded += 1;\n\t    } else {\n\t      graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(manaCostNode['C'], sink, parseInt(x, 10)));\n\t      flowNeeded += parseInt(x, 10);\n\t    }\n\t  });\n\t\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['W'], manaCostNode['W'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['U'], manaCostNode['U'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['B'], manaCostNode['B'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['R'], manaCostNode['R'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['G'], manaCostNode['G'], 1000));\n\t\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['W'], manaCostNode['C'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['U'], manaCostNode['C'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['B'], manaCostNode['C'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['R'], manaCostNode['C'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['G'], manaCostNode['C'], 1000));\n\t  graph.addEdge(new _jsGraphAlgorithms2.default.FlowEdge(openManaNode['C'], manaCostNode['C'], 1000));\n\t\n\t  var maxFlow = new _jsGraphAlgorithms2.default.FordFulkerson(graph, source, sink).value;\n\t  return maxFlow === flowNeeded;\n\t};\n\t\n\tvar QueryResult = function QueryResult(_ref) {\n\t  var openMana = _ref.openMana,\n\t      expansion = _ref.expansion;\n\t\n\t  var _useState = (0, _react.useState)([]),\n\t      cardImages = _useState[0],\n\t      setCardImages = _useState[1];\n\t\n\t  (0, _react.useEffect)(function () {\n\t    if (!expansion) {\n\t      setCardImages([]);\n\t      return;\n\t    }\n\t\n\t    if (openMana === '') {\n\t      openMana = 'wubrg';\n\t    }\n\t\n\t    var colorQuery = openMana.split('').filter(function (c) {\n\t      return wubrg.includes(c.toLowerCase());\n\t    }).concat(['colorless']).map(function (c) {\n\t      return 'c:' + c;\n\t    }).join(' or ');\n\t\n\t    var endpoint = 'https://api.scryfall.com/cards/search?order=cmc&q=';\n\t    var request = endpoint + 's:' + expansion + '+(t:instant or o:flash)+(' + colorQuery + ')';\n\t    fetch(request).then(function (result) {\n\t      return result.json();\n\t    }).then(function (json) {\n\t      if (json.data) {\n\t        setCardImages(json.data.filter(function (card) {\n\t          if (openMana.length === 0) {\n\t            return true;\n\t          }\n\t          return isCastable(openMana, card.mana_cost || card.card_faces[0].mana_cost);\n\t        }).map(function (card) {\n\t          return (card.image_uris || card.card_faces[0].image_uris).normal;\n\t        }));\n\t      }\n\t    });\n\t  }, [openMana, expansion]);\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(\n\t      'div',\n\t      { style: { maxWidth: 1000 } },\n\t      cardImages.map(function (imageUrl) {\n\t        return _react2.default.createElement('img', { width: '200', src: imageUrl, alt: '', key: imageUrl });\n\t      })\n\t    ),\n\t    _react2.default.createElement('br', null)\n\t  );\n\t};\n\t\n\tfunction Home(_ref2) {\n\t  var location = _ref2.location;\n\t\n\t  var _useState2 = (0, _react.useState)(location.search.replace('?', '')),\n\t      expansion = _useState2[0],\n\t      setExpansion = _useState2[1];\n\t\n\t  var _useState3 = (0, _react.useState)(''),\n\t      openMana = _useState3[0],\n\t      setOpenMana = _useState3[1];\n\t\n\t  var _useState4 = (0, _react.useState)([]),\n\t      allExpansion = _useState4[0],\n\t      setAllExpansions = _useState4[1];\n\t\n\t  (0, _react.useEffect)(function () {\n\t    fetch('https://api.scryfall.com/sets').then(function (result) {\n\t      return result.json();\n\t    }).then(function (json) {\n\t      if (!json.data) {\n\t        return;\n\t      }\n\t      setAllExpansions(json.data.filter(function (expansion) {\n\t        return !expansion.parent_set_code && !['spellbook', 'promo', 'funny', 'box', 'duel_deck', 'commander'].includes(expansion.set_type) && !expansion.foil_only;\n\t      }).sort(function (expansion) {\n\t        return expansion.released_at;\n\t      }));\n\t    });\n\t  }, []);\n\t\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    'expansion:',\n\t    _react2.default.createElement(\n\t      'select',\n\t      { value: expansion, onChange: callSetter(setExpansion), onBlur: callSetter(setExpansion) },\n\t      allExpansion.map(function (expansion) {\n\t        return _react2.default.createElement(\n\t          'option',\n\t          { value: expansion.code, key: expansion.id },\n\t          expansion.code.toUpperCase(),\n\t          ' - ',\n\t          expansion.name\n\t        );\n\t      })\n\t    ),\n\t    _react2.default.createElement('br', null),\n\t    'openMana:',\n\t    _react2.default.createElement('input', { type: 'text', value: openMana, placeholder: 'ur', onChange: callSetter(setOpenMana) }),\n\t    _react2.default.createElement('br', null),\n\t    _react2.default.createElement(QueryResult, { openMana: openMana, expansion: expansion })\n\t  );\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-index-js-ef59de24d84a40a71251.js","module.exports = require('./src/jsgraphs');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/js-graph-algorithms/index.js\n// module id = 200\n// module chunks = 35783957827783","var jsgraphs = jsgraphs || {};\r\n\r\n(function(jss){\r\n    \r\n    jss.less = function(a1, a2, compare) {\r\n        return compare(a1, a2) < 0;\r\n    };\r\n    \r\n    jss.exchange = function(a, i, j) {\r\n        var temp = a[i];\r\n        a[i] = a[j];\r\n        a[j] = temp;\r\n    };\r\n    \r\n    var StackNode = function (value) {\r\n        this.value = value;\r\n        this.next = null;\r\n    };\r\n    \r\n    jss.StackNode = StackNode;\r\n    \r\n    var Stack = function() {\r\n        this.N = 0;\r\n        this.first = null;\r\n    };\r\n    \r\n    Stack.prototype.push = function (a) {\r\n        this.first = this._push(this.first, a);  \r\n    };\r\n    \r\n    Stack.prototype._push = function(x, a) {\r\n        if(x == null) {\r\n            this.N++;\r\n            return new jss.StackNode(a);\r\n        }  \r\n        var oldX = x;\r\n        this.N++;\r\n        x = new jss.StackNode(a);\r\n        x.next = oldX;\r\n        return x;\r\n    };\r\n    \r\n    Stack.prototype.pop = function () {\r\n        if (this.first == null) {\r\n            return undefined;\r\n        }  \r\n        \r\n        var oldFirst = this.first;\r\n        var item = oldFirst.value;\r\n        this.first = oldFirst.next;\r\n        this.N--;\r\n        \r\n        return item;\r\n    };\r\n    \r\n    Stack.prototype.size = function() {\r\n        return this.N;  \r\n    };\r\n    \r\n    Stack.prototype.isEmpty = function() {\r\n        return this.N == 0;  \r\n    };\r\n    \r\n    Stack.prototype.peep = function() {\r\n        if (this.first == null) {\r\n            return undefined;\r\n        }  \r\n        \r\n        return this.first.value;\r\n    };\r\n    \r\n    Stack.prototype.toArray = function() {\r\n        var result = [];\r\n        x = this.first;\r\n        while (x != null) {\r\n            result.push(x.value);\r\n            x = x.next;\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    jss.Stack = Stack;\r\n    \r\n    var QueueNode = function(a) {\r\n        this.value = a;  \r\n        this.next = null;\r\n    };\r\n    \r\n    jss.QueueNode = QueueNode;\r\n    \r\n    var Queue = function() {\r\n        this.first = null;\r\n        this.last = null;\r\n        this.N = 0;\r\n    };\r\n    \r\n    Queue.prototype.enqueue = function(item) {\r\n        var oldLast = this.last;\r\n        this.last = new jss.QueueNode(item);\r\n        if(oldLast != null){\r\n            oldLast.next = this.last;\r\n        }\r\n        if (this.first == null) {\r\n            this.first = this.last;\r\n        }\r\n        this.N++;\r\n    };\r\n    \r\n    Queue.prototype.dequeue = function() {\r\n        if(this.first == null) {\r\n            return undefined;\r\n        }  \r\n        \r\n        var oldFirst = this.first;\r\n        var item = oldFirst.value;\r\n        this.first = oldFirst.next;\r\n        \r\n        if(this.first == null) {\r\n            this.last = null;\r\n        }\r\n        \r\n        this.N--;\r\n        \r\n        return item;\r\n    };\r\n    \r\n    Queue.prototype.size = function() {\r\n        return this.N;  \r\n    };\r\n    \r\n    Queue.prototype.isEmpty = function() {\r\n        return this.N == 0;\r\n    };\r\n    \r\n    Queue.prototype.toArray = function() {\r\n        var result = [];\r\n        var x = this.first;\r\n        while (x != null) {\r\n            result.push(x.value);\r\n            x = x.next;\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    jss.Queue = Queue;\r\n    \r\n    var MinPQ = function(compare) {\r\n        this.s = [];\r\n        this.N = 0;\r\n        if(!compare) {\r\n            compare = function(a1, a2) {\r\n                return a1 - a2;\r\n            };\r\n        }\r\n        this.compare = compare;\r\n    };\r\n    \r\n    MinPQ.prototype.enqueue = function(item) {\r\n        while(this.s.lengh <= this.N+1) {\r\n            this.s.push(0);\r\n        }   \r\n        this.s[++this.N] = item;\r\n        this.swim(this.N);\r\n    };\r\n    \r\n    MinPQ.prototype.swim = function(k) {\r\n        while (k > 1){\r\n            var parent = Math.floor(k / 2);\r\n            if(jss.less(this.s[k], this.s[parent], this.compare)){\r\n                jss.exchange(this.s, k, parent);\r\n                k = parent;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    \r\n    MinPQ.prototype.delMin = function() {\r\n        if(this.N == 0) {\r\n            return undefined;\r\n        }  \r\n        \r\n        var item = this.s[1];\r\n        jss.exchange(this.s, 1, this.N--);\r\n        this.sink(1);\r\n        return item;\r\n    };\r\n    \r\n    MinPQ.prototype.sink = function(k) {\r\n        while(k * 2 <= this.N) {\r\n            var child = 2 * k;\r\n            if(child < this.N && jss.less(this.s[child+1], this.s[child], this.compare)){\r\n                child++;\r\n            }\r\n            if(jss.less(this.s[child], this.s[k], this.compare)){\r\n                jss.exchange(this.s, child, k);\r\n                k = child;\r\n            } else {\r\n                break;\r\n            }\r\n        }  \r\n    };\r\n    \r\n    MinPQ.prototype.size = function(){\r\n        return this.N;\r\n    };\r\n    \r\n    MinPQ.prototype.isEmpty = function() {\r\n        return this.N == 0;\r\n    };\r\n    \r\n    jss.MinPQ = MinPQ;\r\n    \r\n    var QuickUnion = function(V) {\r\n        this.id = [];\r\n        for (var v = 0; v < V; ++v) {\r\n            this.id.push(v);\r\n        }\r\n    };\r\n    \r\n    QuickUnion.prototype.union = function(v, w) {\r\n        var q = this.root(v);\r\n        var p = this.root(w);\r\n        \r\n        if(p != q) {\r\n            this.id[p] = q;\r\n        }\r\n    };\r\n    \r\n    QuickUnion.prototype.root = function(q) {\r\n        while(this.id[q] != q) {\r\n            q = this.id[q];\r\n        }  \r\n        return q;\r\n    };\r\n    \r\n    QuickUnion.prototype.connected = function(v, w) {\r\n        return this.root(v) == this.root(w);  \r\n    };\r\n    \r\n    jss.QuickUnion = QuickUnion;\r\n    \r\n    var IndexMinPQ = function(N, compare) {\r\n        this.keys = [];\r\n        this.pq = [];\r\n        this.qp = []; // positions of key in pq\r\n        for(var i = 0; i <= N; ++i) {\r\n            this.keys.push(null);\r\n            this.pq.push(0);\r\n            this.qp.push(-1);\r\n        }\r\n        this.N = 0;\r\n        \r\n        if(!compare) {\r\n            compare = function(a1, a2) {\r\n                return a1 - a2;  \r\n            };\r\n        } \r\n        this.compare = compare;\r\n    };\r\n    \r\n    IndexMinPQ.prototype.insert = function (index, key) {\r\n        this.keys[index] = key;\r\n        \r\n        this.pq[++this.N] = index;\r\n        this.qp[index] = this.N;\r\n        this.swim(this.N);\r\n    };\r\n    \r\n    IndexMinPQ.prototype.decreaseKey = function(index, key) {\r\n        if(jss.less(key, this.keys[index], this.compare)){\r\n            this.keys[index] = key;\r\n            this.swim(this.qp[index]);\r\n        }\r\n    };\r\n    \r\n    IndexMinPQ.prototype.minKey = function() {\r\n        return this.keys[this.pq[1]];  \r\n    };\r\n    \r\n    IndexMinPQ.prototype.min = function() {\r\n        return this.pq[1];  \r\n    };\r\n    \r\n    IndexMinPQ.prototype.delMin = function() {\r\n        var key = this.pq[1];\r\n        jss.exchange(this.pq, 1, this.N);\r\n        this.qp[this.pq[1]] = 1;\r\n        \r\n        this.qp[this.pq[this.N]] = -1;\r\n        this.keys[this.pq[this.N]] = null;\r\n    \r\n        this.N--;\r\n        \r\n        this.sink(1);\r\n        \r\n        return key;\r\n    };\r\n    \r\n    IndexMinPQ.prototype.swim = function (k) {\r\n        while( k > 1) {\r\n            var parent = Math.floor(k / 2);\r\n            if(jss.less(this.keys[this.pq[k]], this.keys[this.pq[parent]], this.compare)){\r\n                jss.exchange(this.pq, k, parent);\r\n                this.qp[this.pq[k]] = k;\r\n                this.qp[this.pq[parent]] = parent;\r\n                k = parent;\r\n            } else {\r\n                break;\r\n            }\r\n        }  \r\n    };\r\n    \r\n    IndexMinPQ.prototype.sink = function (k) {\r\n        while(2 * k <= this.N) {\r\n            var child = k * 2;\r\n            if(child < this.N && jss.less(this.keys[this.pq[child+1]], this.keys[this.pq[child]], this.compare)){\r\n                child++;\r\n            }\r\n            if(jss.less(this.keys[this.pq[child]], this.keys[this.pq[k]], this.compare)) {\r\n                jss.exchange(this.pq, k, child);\r\n                this.qp[this.pq[k]] = k;\r\n                this.qp[this.pq[child]] = child;\r\n                k = child;\r\n            } else {\r\n                break;\r\n            }\r\n        }  \r\n    };\r\n    \r\n    IndexMinPQ.prototype.containsIndex = function (index) {\r\n        return this.qp[index] != -1;  \r\n    };\r\n    \r\n    IndexMinPQ.prototype.isEmpty = function() {\r\n        return this.N == 0;  \r\n    };\r\n    \r\n    IndexMinPQ.prototype.size = function() {\r\n        return this.N;\r\n    }\r\n    \r\n    jss.IndexMinPQ = IndexMinPQ;\r\n    \r\n\tvar Graph = function (V) {\r\n        this.V = V;\r\n        this.adjList = [];\r\n        this.nodeInfo = [];\r\n        this.edges = {};\r\n        for (var i = 0; i < V; ++i) {\r\n            this.adjList.push([]);\r\n            this.nodeInfo.push({});\r\n        }\r\n    };\r\n    \r\n    Graph.prototype.addEdge = function(v, w){\r\n        this.adjList[v].push(w);\r\n        this.adjList[w].push(v);\r\n        var edge_id = v + '_' + w;\r\n        if(v > w) {\r\n            edge_id = w + '_' + v;\r\n        }\r\n        this.edges[edge_id] = new jss.Edge(v, w, 0);\r\n    };\r\n    \r\n    Graph.prototype.adj = function(v) {\r\n        return this.adjList[v];  \r\n    };\r\n    \r\n    Graph.prototype.node = function(v) {\r\n        return this.nodeInfo[v];  \r\n    };\r\n    \r\n    Graph.prototype.edge = function(v, w) {\r\n        var edge_id = v + '_' + w;\r\n        if(v > w) {\r\n            edge_id = w + '_' + v;\r\n        }\r\n        if (edge_id in this.edges) {\r\n            return this.edges[edge_id];\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    jss.Graph = Graph;\r\n    \r\n    var DiGraph = function(V) {\r\n        this.V = V;\r\n        this.adjList = [];\r\n        this.nodeInfo = [];\r\n        this.edges = {};\r\n        for (var v = 0; v < V; ++v){\r\n            this.adjList.push([]);\r\n            this.nodeInfo.push({});\r\n        }\r\n    };\r\n    \r\n    DiGraph.prototype.addEdge = function(v, w){\r\n        this.adjList[v].push(w);\r\n        var edge_id = v + '_' + w;\r\n        this.edges[edge_id] = new jss.Edge(v, w, 0);\r\n    };\r\n    \r\n    DiGraph.prototype.edge = function(v, w) {\r\n        var edge_id = v + '_' + w;\r\n        if(edge_id in this.edges) {\r\n            return this.edges[edge_id];\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n    \r\n    DiGraph.prototype.adj = function(v) {\r\n        return this.adjList[v];  \r\n    };\r\n    \r\n    DiGraph.prototype.node = function(v) {\r\n        return this.nodeInfo[v];  \r\n    };\r\n    \r\n    DiGraph.prototype.reverse = function(){\r\n        var g = new DiGraph(this.V);\r\n        for (var v = 0; v < this.V; ++v) {\r\n            var adj_v = this.adjList[v];\r\n            for (var i = 0; i < adj_v.length; ++i){\r\n                var w = adj_v[i];\r\n                g.addEdge(w, v);\r\n            }\r\n        }\r\n        return g;\r\n    };\r\n    \r\n    jss.DiGraph = DiGraph;\r\n    \r\n    var Edge = function(v, w, weight) {\r\n        this.v = v;\r\n        this.w = w;\r\n        this.weight = weight;\r\n    };\r\n    \r\n    Edge.prototype.either = function() {\r\n        return this.v;\r\n    };\r\n    \r\n    Edge.prototype.other = function(x) {\r\n        return x == this.v ? this.w : this.v;\r\n    };\r\n    \r\n    Edge.prototype.from = function() {\r\n        return this.v;\r\n    };\r\n    \r\n    Edge.prototype.to = function() {\r\n        return this.w;\r\n    };\r\n    \r\n    jss.Edge = Edge;\r\n    \r\n    var WeightedGraph = function(V) {\r\n        this.V = V;\r\n        this.adjList = [];\r\n        this.nodeInfo = [];\r\n        \r\n        for ( var v = 0; v < V; ++v) {\r\n            this.adjList.push([]);\r\n            this.nodeInfo.push({});\r\n        }\r\n    };\r\n    \r\n    WeightedGraph.prototype.adj = function(v) {\r\n        return this.adjList[v];  \r\n    };\r\n    \r\n    WeightedGraph.prototype.edge = function(v, w) {\r\n        var adj_v = this.adjList[v];\r\n        for(var i=0; i < adj_v.length; ++i) {\r\n            var x = adj_v[i].other(v);\r\n            if(x == w) {\r\n                return adj_v[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    WeightedGraph.prototype.node = function(v) {\r\n        return this.nodeInfo[v];  \r\n    };\r\n    \r\n    WeightedGraph.prototype.addEdge = function(e) {\r\n        var v = e.either();\r\n        var w = e.other(v);\r\n        this.adjList[v].push(e);\r\n        this.adjList[w].push(e);\r\n    };\r\n    \r\n    jss.WeightedGraph = WeightedGraph;\r\n    \r\n    var WeightedDiGraph = function(V) {\r\n        WeightedGraph.call(this, V);\r\n    };\r\n    \r\n    WeightedDiGraph.prototype = Object.create(jss.WeightedGraph.prototype);\r\n    \r\n    WeightedDiGraph.prototype.addEdge = function(e) {\r\n        var v = e.from();\r\n        this.adjList[v].push(e);\r\n    };\r\n    \r\n    WeightedDiGraph.prototype.edge = function(v, w) {\r\n        var adj_v = this.adjList[v];\r\n        for(var i=0; i < adj_v.length; ++i) {\r\n            var x = adj_v[i].other(v);\r\n            if(x == w) {\r\n                return adj_v[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    WeightedDiGraph.prototype.toDiGraph = function() {\r\n        var g = new jss.DiGraph(this.V);\r\n        for(var v = 0; v < this.V; ++v) {\r\n            var adj_v = this.adjList[v];\r\n            for (var i =0; i < adj_v.length; ++i) {\r\n                var e = adj_v[i];\r\n                var w = e.other(v);\r\n                g.addEdge(v, w);\r\n            }\r\n        }\r\n        return g;\r\n    };\r\n    \r\n    jss.WeightedDiGraph = WeightedDiGraph;\r\n    \r\n    var FlowEdge = function(v, w, capacity) {\r\n        this.v = v;\r\n        this.w = w;\r\n        this.capacity = capacity;\r\n        this.flow = 0;\r\n    };\r\n    \r\n    FlowEdge.prototype.residualCapacityTo = function (x) {\r\n        if(x == this.v) {\r\n            return this.flow;\r\n        } else {\r\n            return this.capacity - this.flow;\r\n        }\r\n    };\r\n    \r\n    FlowEdge.prototype.addResidualFlowTo = function (x, deltaFlow) {\r\n        if(x == this.v) {\r\n            this.flow -= deltaFlow;\r\n        } else if(x == this.w) {\r\n            this.flow += deltaFlow;\r\n        }\r\n    };\r\n    \r\n    FlowEdge.prototype.from = function() {\r\n        return this.v;\r\n    };\r\n    \r\n    FlowEdge.prototype.to = function() {\r\n        return this.w;\r\n    };\r\n    \r\n    FlowEdge.prototype.other = function(x) {\r\n        return x == this.v ? this.w : this.v;\r\n    }\r\n    \r\n    \r\n    jss.FlowEdge = FlowEdge;\r\n    \r\n    var FlowNetwork = function(V) {\r\n        this.V = V;\r\n        this.adjList = [];\r\n        this.nodeInfo = [];\r\n        for(var v = 0; v < V; ++v) {\r\n            this.adjList.push([]);\r\n            this.nodeInfo.push({});\r\n        }\r\n    };\r\n    \r\n    FlowNetwork.prototype.node = function(v) {\r\n        return this.nodeInfo[v];\r\n    };\r\n    \r\n    FlowNetwork.prototype.edge = function(v, w) {\r\n        var adj_v = this.adjList[v];\r\n        for(var i=0; i < adj_v.length; ++i) {\r\n            var x = adj_v[i].other(v);\r\n            if(x == w) {\r\n                return adj_v[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    FlowNetwork.prototype.addEdge = function(e) {\r\n        var v = e.from();\r\n        this.adjList[v].push(e);\r\n        var w = e.other(v);\r\n        this.adjList[w].push(e);\r\n    };\r\n    \r\n    FlowNetwork.prototype.adj = function(v) {\r\n        return this.adjList[v];  \r\n    };\r\n    \r\n    jss.FlowNetwork = FlowNetwork;\r\n    \r\n    var DepthFirstSearch = function(G, s) {\r\n        this.s = s;\r\n        var V = G.V;\r\n        this.marked = [];\r\n        this.edgeTo = [];\r\n        for (var v = 0; v < V; ++v) {\r\n            this.marked.push(false);\r\n            this.edgeTo.push(-1);\r\n        }\r\n        \r\n        this.dfs(G, s);\r\n    };\r\n    \r\n    DepthFirstSearch.prototype.dfs = function (G, v) {\r\n        this.marked[v] = true;\r\n        var adj_v = G.adj(v);\r\n        for (var i = 0; i < adj_v.length; ++i){\r\n            var w = adj_v[i];\r\n            if (!this.marked[w]){\r\n                this.edgeTo[w] = v;\r\n                this.dfs(G, w);\r\n            }\r\n        }\r\n    };\r\n    \r\n    DepthFirstSearch.prototype.hasPathTo = function(v) {\r\n        return this.marked[v];\r\n    };\r\n    \r\n    DepthFirstSearch.prototype.pathTo = function(v) {\r\n        var path = new jss.Stack();\r\n        if(v == this.s) return [v];\r\n        \r\n        for(var x = v; x != this.s; x = this.edgeTo[x]) {\r\n            path.push(x);\r\n        }\r\n        path.push(this.s);\r\n        return path.toArray();\r\n    };\r\n    \r\n    jss.DepthFirstSearch = DepthFirstSearch;\r\n    \r\n    var BreadthFirstSearch = function(G, s) {\r\n        var V = G.V;\r\n        this.s = s;\r\n        \r\n        var queue = new jss.Queue();\r\n        queue.enqueue(s);\r\n        this.marked = [];\r\n        this.edgeTo = [];\r\n        \r\n        for(var v = 0; v < V; ++v) {\r\n            this.marked.push(false);\r\n            this.edgeTo.push(-1);\r\n        }\r\n        \r\n        while (!queue.isEmpty()) {\r\n            var v = queue.dequeue();\r\n            this.marked[v] = true;\r\n            var adj_v = G.adj(v);\r\n            for (var i = 0; i < adj_v.length; ++i) {\r\n                var w = adj_v[i];\r\n                if(!this.marked[w]){\r\n                    this.edgeTo[w] = v;\r\n                    queue.enqueue(w);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    BreadthFirstSearch.prototype.hasPathTo = function(v) {\r\n        return this.marked[v];\r\n    };\r\n    \r\n    BreadthFirstSearch.prototype.pathTo = function(v) {\r\n        var path = new jss.Stack();\r\n        if(v == this.s) return [v];\r\n        \r\n        for(var x = v; x != this.s; x = this.edgeTo[x]) {\r\n            path.push(x);\r\n        }\r\n        path.push(this.s);\r\n        return path.toArray();\r\n    };\r\n    \r\n    jss.BreadthFirstSearch = BreadthFirstSearch;\r\n    \r\n    var ConnectedComponents = function(G) {\r\n        this.count = 0;\r\n        var V = G.V;\r\n        this.marked = [];\r\n        this.id = [];\r\n        for (var v = 0; v < V; ++v) {\r\n            this.marked.push(false);\r\n            this.id.push(-1);\r\n        }\r\n        \r\n        for (var v = 0; v < V; ++v) {\r\n            if(!this.marked[v]){\r\n                this.dfs(G, v);\r\n                this.count++;\r\n            }\r\n        }\r\n    };\r\n    \r\n    ConnectedComponents.prototype.dfs = function(G, v) {\r\n        this.marked[v] = true;\r\n        this.id[v] = this.count;\r\n        var adj_v = G.adj(v);\r\n        \r\n        for(var i = 0; i < adj_v.length; ++i){\r\n            var w = adj_v[i];\r\n            if(!this.marked[w]){\r\n                this.dfs(G, w);\r\n            }\r\n        }\r\n    };\r\n    \r\n    ConnectedComponents.prototype.componentId = function(v) {\r\n        return this.id[v];\r\n    };\r\n    \r\n    ConnectedComponents.prototype.componentCount = function(){\r\n        return this.count;\r\n    };\r\n    \r\n    \r\n    jss.ConnectedComponents = ConnectedComponents;\r\n    \r\n    var TopologicalSort = function(G) {\r\n        this.postOrder = new jss.Stack();\r\n        this.marked = [];\r\n        var V = G.V;\r\n        for (var v = 0; v < V; ++v) {\r\n            this.marked.push(false);\r\n        }\r\n        \r\n        for (var v = 0; v < V; ++v) {\r\n            if(!this.marked[v]) {\r\n                this.dfs(G, v);\r\n            }\r\n        }\r\n    };\r\n    \r\n    TopologicalSort.prototype.dfs = function(G, v) {\r\n        this.marked[v] = true;\r\n        var adj_v = G.adj(v);\r\n        for (var i = 0; i < adj_v.length; ++i) {\r\n            var w = adj_v[i];\r\n            if(!this.marked[w]){\r\n                this.dfs(G, w);\r\n            }\r\n        }\r\n        this.postOrder.push(v);\r\n    };\r\n    \r\n    TopologicalSort.prototype.order = function() {\r\n        return this.postOrder.toArray();  \r\n    };\r\n    \r\n    jss.TopologicalSort = TopologicalSort;\r\n    \r\n    var StronglyConnectedComponents = function(G) {\r\n        var V = G.V;\r\n        this.count = 0;\r\n        this.marked = [];\r\n        this.id = [];\r\n        \r\n        for(var v = 0; v < V; ++v) {\r\n            this.marked.push(false);\r\n            this.id.push(-1);\r\n        }\r\n        \r\n        var order = new jss.TopologicalSort(G.reverse()).order();\r\n        for( var i = 0; i < order.length; ++i) {\r\n            var v = order[i];\r\n            if(!this.marked[v]){\r\n                this.dfs(G, v);\r\n                this.count++;\r\n            }\r\n        }\r\n    };\r\n    \r\n    StronglyConnectedComponents.prototype.dfs = function (G, v) {\r\n        this.marked[v] = true;\r\n        this.id[v] = this.count;\r\n        var adj_v = G.adj(v);\r\n        for (var i = 0; i < adj_v.length; ++i){\r\n            var w = adj_v[i];\r\n            if(!this.marked[w]){\r\n                this.dfs(G, w);\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    StronglyConnectedComponents.prototype.componentId = function(v) {\r\n        return this.id[v];\r\n    };\r\n    \r\n    StronglyConnectedComponents.prototype.componentCount = function(){\r\n        return this.count;\r\n    };\r\n    \r\n    jss.StronglyConnectedComponents = StronglyConnectedComponents;\r\n    \r\n    var KruskalMST = function(G) {\r\n        var V = G.V;\r\n        var pq = new jss.MinPQ(function(e1, e2){\r\n            return e1.weight - e2.weight;\r\n        });\r\n        for(var v = 0; v < G.V; ++v){\r\n            var adj_v = G.adj(v);\r\n            for (var i = 0; i < adj_v.length; ++i) {\r\n                var e = adj_v[i];\r\n                if(e.either() != v) {\r\n                    continue;\r\n                }\r\n                pq.enqueue(e);\r\n            }\r\n        }\r\n        \r\n        this.mst = [];\r\n        \r\n        var uf = new jss.QuickUnion(V);\r\n        while (!pq.isEmpty() && this.mst.length < V-1) {\r\n            var e = pq.delMin();\r\n            var v = e.either();\r\n            var w = e.other(v);\r\n            \r\n            if(!uf.connected(v, w)){\r\n                uf.union(v, w);\r\n                this.mst.push(e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n    jss.KruskalMST = KruskalMST;\r\n    \r\n    var LazyPrimMST = function(G) {\r\n        var V = G.V;\r\n        this.marked = [];\r\n        for( var v = 0; v < V; ++v) {\r\n            this.marked.push(false);\r\n        }\r\n        \r\n        this.pq = new jss.MinPQ(function(e1, e2){\r\n            return e1.weight - e2.weight;\r\n        });\r\n        \r\n        this.mst = [];\r\n        \r\n        this.visit(G, 0);\r\n        \r\n        while(!this.pq.isEmpty() && this.mst.length < V-1) {\r\n            var e = this.pq.delMin();\r\n            var v = e.either();\r\n            var w = e.other(v);\r\n            if(this.marked[v] && this.marked[w]) continue;\r\n            this.mst.push(e);\r\n            if(!this.marked[v]) this.visit(G, v);\r\n            if(!this.marked[w]) this.visit(G, w);\r\n        }\r\n    };\r\n    \r\n    LazyPrimMST.prototype.visit = function(G, v) {\r\n        this.marked[v]  = true;\r\n        var adj_v = G.adj(v);\r\n        for (var i = 0; i < adj_v.length; ++i) {\r\n            var e = adj_v[i];\r\n            if(!this.marked[e.other(v)]){\r\n                this.pq.enqueue(e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    jss.LazyPrimMST = LazyPrimMST;\r\n    \r\n    var EagerPrimMST = function(G) {\r\n        var V = G.V;\r\n        this.pq = new jss.IndexMinPQ(V, function(e1, e2) {\r\n            return e1.weight - e2.weight;\r\n        });\r\n        this.marked = [];\r\n        for(var v = 0; v < V; ++v) {\r\n            this.marked.push(false);\r\n        }\r\n        this.mst = [];\r\n        this.visit(G, 0);\r\n        while(!this.pq.isEmpty()) {\r\n            var e = this.pq.minKey();\r\n            var w = this.pq.delMin();\r\n            \r\n            this.mst.push(e);\r\n            \r\n            if(!this.marked[w]){\r\n                this.visit(G, w);\r\n            }\r\n            \r\n        }\r\n    };\r\n    \r\n    EagerPrimMST.prototype.visit = function(G, v) {\r\n        this.marked[v]  = true;\r\n        var adj_v = G.adj(v);\r\n        for(var i = 0; i < adj_v.length; ++i) {\r\n            var e = adj_v[i];\r\n            var w = e.other(v);\r\n            if(this.marked[w]) continue;\r\n            if(this.pq.containsIndex(w)){\r\n                this.pq.decreaseKey(w, e);\r\n            } else {\r\n                this.pq.insert(w, e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    jss.EagerPrimMST = EagerPrimMST;\r\n    \r\n    var Dijkstra = function(G, s) {\r\n        var V = G.V;\r\n        this.s = s;\r\n        this.marked = [];\r\n        this.edgeTo = [];\r\n        this.cost = [];\r\n        this.pq = new jss.IndexMinPQ(V, function(cost1, cost2){\r\n            return cost1, cost2;\r\n        });\r\n        \r\n        for(var v =0; v < V; ++v){\r\n            this.marked.push(false);\r\n            this.edgeTo.push(null);\r\n            this.cost.push(Number.MAX_VALUE);\r\n        }\r\n        \r\n        this.cost[s] = 0;\r\n        \r\n        this.pq.insert(s, this.cost[s]);\r\n        \r\n        while(!this.pq.isEmpty()) {\r\n            var v = this.pq.delMin();\r\n            this.marked[v] = true;\r\n            var adj_v = G.adj(v);\r\n            for(var i = 0; i < adj_v.length; ++i) {\r\n                var e = adj_v[i];\r\n                this.relax(e);\r\n            }\r\n        }\r\n        \r\n    };\r\n    \r\n        \r\n    \r\n    \r\n    Dijkstra.prototype.relax = function(e) {\r\n        \r\n        var v = e.from();\r\n        var w = e.to();\r\n        \r\n        if(this.cost[w] > this.cost[v] + e.weight) {\r\n            this.cost[w] = this.cost[v] + e.weight;\r\n            this.edgeTo[w] = e;\r\n            if(this.pq.containsIndex(w)){\r\n                this.pq.decreaseKey(w, this.cost[w]);\r\n            } else {\r\n                this.pq.insert(w, this.cost[w]);\r\n            }\r\n        }\r\n    };\r\n    \r\n\r\n    \r\n    Dijkstra.prototype.hasPathTo = function(v) {\r\n        return this.marked[v];  \r\n    };\r\n\r\n    \r\n    Dijkstra.prototype.pathTo = function(v) {\r\n        var path = new jss.Stack();\r\n        for(var x = v; x != this.s; x = this.edgeTo[x].other(x)) {\r\n            path.push(this.edgeTo[x]);\r\n        }  \r\n        return path.toArray();\r\n    };\r\n    \r\n    Dijkstra.prototype.distanceTo = function(v) {\r\n        return this.cost[v];  \r\n    };\r\n    \r\n    \r\n    jss.Dijkstra = Dijkstra;\r\n    \r\n    var BellmanFord = function(G, s) {\r\n        var V = G.V;\r\n        this.s = s;\r\n        this.marked = [];\r\n        this.edgeTo = [];\r\n        this.cost = [];\r\n        \r\n        \r\n        for(var v =0; v < V; ++v){\r\n            this.marked.push(false);\r\n            this.edgeTo.push(null);\r\n            this.cost.push(Number.MAX_VALUE);\r\n        }\r\n        \r\n        this.cost[s] = 0;\r\n        this.marked[s] = true;\r\n        \r\n        for(var j = 0; j < V; ++j) {\r\n            for(var v = 0; v < V; ++v){\r\n                var adj_v = G.adj(v);\r\n                for(var i = 0; i < adj_v.length; ++i) {\r\n                    var e = adj_v[i];\r\n                    this.relax(e);\r\n                }\r\n            }\r\n        }\r\n        \r\n    };\r\n    \r\n    BellmanFord.prototype.relax = function(e) {\r\n        \r\n        var v = e.from();\r\n        var w = e.to();\r\n        \r\n        if(this.cost[w] > this.cost[v] + e.weight) {\r\n            this.cost[w] = this.cost[v] + e.weight;\r\n            this.marked[w] = true;\r\n            this.edgeTo[w] = e;\r\n        }\r\n    };\r\n    \r\n    BellmanFord.prototype.hasPathTo = function(v) {\r\n        return this.marked[v];  \r\n    };\r\n\r\n    \r\n    BellmanFord.prototype.pathTo = function(v) {\r\n        var path = new jss.Stack();\r\n        for(var x = v; x != this.s; x = this.edgeTo[x].other(x)) {\r\n            path.push(this.edgeTo[x]);\r\n        }  \r\n        return path.toArray();\r\n    };\r\n    \r\n    BellmanFord.prototype.distanceTo = function(v) {\r\n        return this.cost[v];  \r\n    };\r\n    \r\n    jss.BellmanFord = BellmanFord;\r\n    \r\n    var TopologicalSortShortestPaths = function(G, s) {\r\n        var V = G.V;\r\n        this.s = s;\r\n        this.marked = [];\r\n        this.edgeTo = [];\r\n        this.cost = [];\r\n        \r\n        \r\n        for(var v =0; v < V; ++v){\r\n            this.marked.push(false);\r\n            this.edgeTo.push(null);\r\n            this.cost.push(Number.MAX_VALUE);\r\n        }\r\n        \r\n        this.cost[s] = 0;\r\n        this.marked[s] = true;\r\n        \r\n        var order = new jss.TopologicalSort(G.toDiGraph()).order();\r\n        \r\n        \r\n        for(var j = 0; j < order.length; ++j){\r\n            var v = order[j];\r\n            var adj_v = G.adj(v);\r\n            for(var i = 0; i < adj_v.length; ++i) {\r\n                var e = adj_v[i];\r\n                this.relax(e);\r\n            }\r\n        }\r\n        \r\n        \r\n    };\r\n    \r\n    TopologicalSortShortestPaths.prototype.relax = function(e) {\r\n        \r\n        var v = e.from();\r\n        var w = e.to();\r\n        \r\n        if(this.cost[w] > this.cost[v] + e.weight) {\r\n            this.cost[w] = this.cost[v] + e.weight;\r\n            this.marked[w] = true;\r\n            this.edgeTo[w] = e;\r\n        }\r\n    };\r\n    \r\n    TopologicalSortShortestPaths.prototype.hasPathTo = function(v) {\r\n        return this.marked[v];  \r\n    };\r\n\r\n    \r\n    TopologicalSortShortestPaths.prototype.pathTo = function(v) {\r\n        var path = new jss.Stack();\r\n        for(var x = v; x != this.s; x = this.edgeTo[x].other(x)) {\r\n            path.push(this.edgeTo[x]);\r\n        }  \r\n        return path.toArray();\r\n    };\r\n    \r\n    TopologicalSortShortestPaths.prototype.distanceTo = function(v) {\r\n        return this.cost[v];  \r\n    };\r\n    \r\n    jss.TopologicalSortShortestPaths = TopologicalSortShortestPaths;\r\n    \r\n    var FordFulkerson = function(G, s, t) {\r\n        this.value = 0;\r\n        var V = G.V;\r\n        var bottle = Number.MAX_VALUE;\r\n        this.marked = null;\r\n        this.edgeTo = null;\r\n        this.s = s;\r\n        this.t = t;\r\n        while(this.hasAugmentedPath(G)){\r\n            \r\n            for(var x = this.t; x != this.s; x = this.edgeTo[x].other(x)) {\r\n                bottle = Math.min(bottle, this.edgeTo[x].residualCapacityTo(x));\r\n            }\r\n            \r\n            for(var x = this.t; x != this.s; x = this.edgeTo[x].other(x)) {\r\n                this.edgeTo[x].addResidualFlowTo(x, bottle);\r\n            }\r\n            \r\n            \r\n            this.value += bottle;\r\n        }\r\n    };\r\n    \r\n    FordFulkerson.prototype.hasAugmentedPath = function(G) {\r\n        var V = G.V;\r\n        this.marked = [];\r\n        this.edgeTo = [];\r\n        for(var v = 0; v < V; ++v) {\r\n            this.marked.push(false);\r\n            this.edgeTo.push(null);\r\n        }\r\n        \r\n        var queue = new jss.Queue();\r\n        queue.enqueue(this.s);\r\n        \r\n        this.marked[this.s] = true;\r\n        while(!queue.isEmpty()){\r\n            var v = queue.dequeue();\r\n            var adj_v = G.adj(v);\r\n            \r\n            for (var i = 0; i < adj_v.length; ++i) {\r\n                var e = adj_v[i];\r\n                var w = e.other(v);\r\n                if(!this.marked[w] && e.residualCapacityTo(w) > 0){\r\n                    this.edgeTo[w] = e;\r\n                    this.marked[w] = true;\r\n                    if(w == this.t){\r\n                        return true;\r\n                    }\r\n                    \r\n                    queue.enqueue(w);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    };\r\n    \r\n    FordFulkerson.prototype.minCut = function(G) {\r\n        var cuts = [];\r\n        var V = G.V;\r\n        for(var v = 0; v < V; ++v){\r\n            var adj_v = G.adj(v);\r\n            for(var i = 0; i < adj_v.length; ++i) {\r\n                var e = adj_v[i];\r\n                if(e.from() == v && e.residualCapacityTo(e.other(v)) == 0) {\r\n                    cuts.push(e);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return cuts;\r\n    };\r\n\r\n    jss.FordFulkerson = FordFulkerson;\r\n})(jsgraphs);\r\n\r\nvar module = module || {};\r\nif(module) {\r\n\tmodule.exports = jsgraphs;\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/js-graph-algorithms/src/jsgraphs.js\n// module id = 201\n// module chunks = 35783957827783","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/object-assign/index.js\n// module id = 65\n// module chunks = 35783957827783 231608221292675","import React, { useState, useEffect } from 'react'\nimport jsgraphs from 'js-graph-algorithms'\n\nconst wubrg = 'wubrg'.split('')\nconst callSetter = setter => event => setter(event.target.value)\n\nconst isCastable = (openMana, manaCost) => {\n  openMana = openMana.toUpperCase().match(/[WUBRGC]/g)\n\n  const graph = new jsgraphs.FlowNetwork(14)\n  const source = 0\n  const sink = 13\n  const openManaNode = {\n    W: 1,\n    U: 2,\n    B: 3,\n    R: 4,\n    G: 5,\n    C: 6\n  }\n  const manaCostNode = {\n    W: 7,\n    U: 8,\n    B: 9,\n    R: 10,\n    G: 11,\n    C: 12\n  }\n\n  openMana.forEach(x => graph.addEdge(new jsgraphs.FlowEdge(source, openManaNode[x], 1)))\n\n  let flowNeeded = 0\n  manaCost\n    .toUpperCase()\n    .replace('{X}', '')\n    .match(/\\{([0-9]+|[WUBRG])\\}/g)\n    .map(x => x.replace('{', '').replace('}', ''))\n    .forEach(x => {\n      if (wubrg.includes(x.toLowerCase())) {\n        graph.addEdge(new jsgraphs.FlowEdge(manaCostNode[x], sink, 1))\n        flowNeeded += 1\n      } else {\n        graph.addEdge(new jsgraphs.FlowEdge(manaCostNode['C'], sink, parseInt(x, 10)))\n        flowNeeded += parseInt(x, 10)\n      }\n    })\n\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['W'], manaCostNode['W'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['U'], manaCostNode['U'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['B'], manaCostNode['B'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['R'], manaCostNode['R'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['G'], manaCostNode['G'], 1000))\n\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['W'], manaCostNode['C'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['U'], manaCostNode['C'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['B'], manaCostNode['C'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['R'], manaCostNode['C'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['G'], manaCostNode['C'], 1000))\n  graph.addEdge(new jsgraphs.FlowEdge(openManaNode['C'], manaCostNode['C'], 1000))\n\n  const maxFlow = new jsgraphs.FordFulkerson(graph, source, sink).value\n  return maxFlow === flowNeeded\n}\n\nconst QueryResult = ({openMana, expansion}) => {\n  const [cardImages, setCardImages] = useState([])\n\n  useEffect(() => {\n    if (!expansion) {\n      setCardImages([])\n      return\n    }\n\n    if (openMana === '') {\n      openMana = 'wubrg'\n    }\n\n    const colorQuery = openMana\n      .split('')\n      .filter(c => wubrg.includes(c.toLowerCase()))\n      .concat(['colorless'])\n      .map(c => 'c:' + c)\n      .join(' or ')\n\n    const endpoint = 'https://api.scryfall.com/cards/search?order=cmc&q='\n    const request = `${endpoint}s:${expansion}+(t:instant or o:flash)+(${colorQuery})`\n    fetch(request)\n      .then(result => result.json())\n      .then(json => {\n        if (json.data) {\n          setCardImages(json.data\n            .filter(card => {\n              if (openMana.length === 0) {\n                return true\n              }\n              return isCastable(openMana, card.mana_cost || card.card_faces[0].mana_cost)\n            })\n            .map(card => (card.image_uris || card.card_faces[0].image_uris).normal)\n          )\n        }\n      })\n  }, [openMana, expansion])\n  return (\n    <div>\n      <div style={{maxWidth: 1000}}>\n        {cardImages.map(imageUrl => <img width='200' src={imageUrl} alt='' key={imageUrl} />)}\n      </div>\n      <br />\n    </div>\n  )\n}\n\nexport default function Home({location}) {\n  const [expansion, setExpansion] = useState(location.search.replace('?', ''))\n  const [openMana, setOpenMana] = useState('')\n\n  const [allExpansion, setAllExpansions] = useState([])\n  useEffect(() => {\n    fetch('https://api.scryfall.com/sets')\n      .then(result => result.json())\n      .then(json => {\n        if (!json.data) {\n          return\n        }\n        setAllExpansions(json.data\n          .filter(expansion =>\n            !expansion.parent_set_code\n              && !['spellbook', 'promo', 'funny', 'box', 'duel_deck', 'commander'].includes(expansion.set_type)\n              && !expansion.foil_only)\n          .sort(expansion => expansion.released_at))\n      })\n  }, [])\n\n  return (\n    <div>\n      expansion: \n      <select value={expansion} onChange={callSetter(setExpansion)} onBlur={callSetter(setExpansion)}>\n        {allExpansion.map(expansion => (\n          <option value={expansion.code} key={expansion.id}>\n            {expansion.code.toUpperCase()} - {expansion.name}\n          </option>\n        ))}\n      </select>\n      <br />\n      openMana:\n      <input type='text' value={openMana} placeholder='ur' onChange={callSetter(setOpenMana)} />\n      <br />\n      <QueryResult openMana={openMana} expansion={expansion} />\n    </div>\n  )\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/index.js"],"sourceRoot":""}