{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["wubrg","split","callSetter","setter","event","target","value","QueryResult","colors","expansion","useState","cardImages","setCardImages","useEffect","colorQuery","filter","c","includes","map","join","fetch","endpoint","then","result","json","data","card","image_uris","card_faces","normal","style","maxWidth","imageUrl","width","src","alt","key","Home","useLocation","search","slice","setExpansion","setColors","allExpansion","setAllExpansions","parent_set_code","set_type","foil_only","sort","released_at","onChange","onBlur","code","id","toUpperCase","name","type","placeholder"],"mappings":"2OAGMA,EAAQ,QAAQC,MAAM,IACtBC,EAAa,SAAAC,GAAM,OAAI,SAAAC,GAAK,OAAID,EAAOC,EAAMC,OAAOC,SAEpDC,EAAc,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAAe,EACPC,mBAAS,IAAtCC,EADoC,KACxBC,EADwB,KAuB3C,OApBAC,qBAAU,WACR,GAAKJ,EAAL,CAKA,IAAMK,GAAcN,EAAOP,MAAM,IAAIc,QAAO,SAAAC,GAAC,OAAIhB,EAAMiB,SAASD,OAAOhB,GACpEkB,KAAI,SAAAF,GAAC,MAAI,KAAOA,KAChBG,KAAK,QAIRC,MADmBC,uDAAaZ,EAAnB,4BAAwDK,EAAxD,KAEVQ,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GACAA,EAAKC,MACPb,EAAcY,EAAKC,KAAKP,KAAI,SAAAQ,GAAI,OAAKA,EAAKC,YAAcD,EAAKE,WAAW,GAAGD,YAAYE,mBAd3FjB,EAAc,MAiBf,CAACJ,EAAQC,IAEV,6BACE,yBAAKqB,MAAO,CAACC,SAAU,MACpBpB,EAAWO,KAAI,SAAAc,GAAQ,OAAI,yBAAKC,MAAM,MAAMC,IAAKF,EAAUG,IAAI,GAAGC,IAAKJ,QAE1E,+BAKS,SAASK,IAAQ,IAAD,EACK3B,mBAAS4B,wBAAcC,OAAOC,MAAM,IAA/D/B,EADsB,KACXgC,EADW,OAED/B,mBAAS,IAA9BF,EAFsB,KAEdkC,EAFc,OAIYhC,mBAAS,IAA3CiC,EAJsB,KAIRC,EAJQ,KAqB7B,OAhBA/B,qBAAU,WACRO,MAAM,iCACHE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GACCA,EAAKC,MAGVmB,EAAiBpB,EAAKC,KACnBV,QAAO,SAAAN,GAAS,OACdA,EAAUoC,kBACL,CAAC,YAAa,QAAS,QAAS,MAAO,YAAa,aAAa5B,SAASR,EAAUqC,YACpFrC,EAAUsC,aACjBC,MAAK,SAAAvC,GAAS,OAAIA,EAAUwC,qBAElC,IAGD,0CAEE,4BAAQ3C,MAAOG,EAAWyC,SAAUhD,EAAWuC,GAAeU,OAAQjD,EAAWuC,IAC9EE,EAAazB,KAAI,SAAAT,GAAS,OACzB,4BAAQH,MAAOG,EAAU2C,KAAMhB,IAAK3B,EAAU4C,IAC3C5C,EAAU2C,KAAKE,cADlB,MACoC7C,EAAU8C,UAIlD,6BATF,UAWE,2BAAOC,KAAK,OAAOlD,MAAOE,EAAQiD,YAAY,KAAKP,SAAUhD,EAAWwC,KACxE,6BACA,kBAACnC,EAAD,CAAaC,OAAQA,EAAQC,UAAWA","file":"component---src-pages-index-js-93ee72ab632a47791acb.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useLocation } from '@reach/router'\n\nconst wubrg = 'wubrg'.split('')\nconst callSetter = setter => event => setter(event.target.value)\n\nconst QueryResult = ({colors, expansion}) => {\n  const [cardImages, setCardImages] = useState([])\n\n  useEffect(() => {\n    if (!expansion) {\n      setCardImages([])\n      return\n    }\n\n    const colorQuery = (colors.split('').filter(c => wubrg.includes(c)) || wubrg)\n      .map(c => 'c:' + c)\n      .join(' or ')\n\n    const endpoint = 'https://api.scryfall.com/cards/search?order=cmc&q='\n    const request = `${endpoint}s:${expansion}+(t:instant or o:flash)+(${colorQuery})`\n    fetch(request)\n      .then(result => result.json())\n      .then(json => {\n        if (json.data) {\n          setCardImages(json.data.map(card => (card.image_uris || card.card_faces[0].image_uris).normal))\n        }\n      })\n  }, [colors, expansion])\n  return (\n    <div>\n      <div style={{maxWidth: 1000}}>\n        {cardImages.map(imageUrl => <img width='200' src={imageUrl} alt='' key={imageUrl} />)}\n      </div>\n      <br />\n    </div>\n  )\n}\n\nexport default function Home() {\n  const [expansion, setExpansion] = useState(useLocation().search.slice(1))\n  const [colors, setColors] = useState('')\n\n  const [allExpansion, setAllExpansions] = useState([])\n  useEffect(() => {\n    fetch('https://api.scryfall.com/sets')\n      .then(result => result.json())\n      .then(json => {\n        if (!json.data) {\n          return\n        }\n        setAllExpansions(json.data\n          .filter(expansion =>\n            !expansion.parent_set_code\n              && !['spellbook', 'promo', 'funny', 'box', 'duel_deck', 'commander'].includes(expansion.set_type)\n              && !expansion.foil_only)\n          .sort(expansion => expansion.released_at))\n      })\n  }, [])\n\n  return (\n    <div>\n      expansion: \n      <select value={expansion} onChange={callSetter(setExpansion)} onBlur={callSetter(setExpansion)}>\n        {allExpansion.map(expansion => (\n          <option value={expansion.code} key={expansion.id}>\n            {expansion.code.toUpperCase()} - {expansion.name}\n          </option>\n        ))}\n      </select>\n      <br />\n      colors:\n      <input type='text' value={colors} placeholder='ur' onChange={callSetter(setColors)} />\n      <br />\n      <QueryResult colors={colors} expansion={expansion} />\n    </div>\n  )\n}\n"],"sourceRoot":""}